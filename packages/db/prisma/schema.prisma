// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = "mysql://root:CqoRzrnr6EOsxvnzOKL0@containers-us-west-140.railway.app:5543/railway"
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    courses       UserCourse[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id          String       @id @default(cuid())
    name        String
    description String       @db.Text
    createdAt   DateTime
    image       String
    questions   Question[]
    users       UserCourse[]
}

model Question {
    id          String     @id @default(cuid())
    course      Course     @relation(fields: [courseId], references: [id])
    order       Int
    courseId    String
    instruction String     @db.Text
    answer      String
    progresses  Progress[]
}

model UserCourse {
    id       String     @unique @default(cuid())
    user     User       @relation(fields: [userId], references: [id])
    userId   String
    course   Course     @relation(fields: [courseId], references: [id])
    courseId String
    progress Progress[]

    machinePort Int?    @unique
    machineId   String? @unique

    @@id([userId, courseId])
}

model Progress {
    id           String     @id @default(cuid())
    userCourse   UserCourse @relation(fields: [userCourseId], references: [id])
    userCourseId String
    question     Question   @relation(fields: [questionId], references: [id])
    questionId   String
}
